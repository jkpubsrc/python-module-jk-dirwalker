


import typing






class ExtensionMatcher(object):

	################################################################################################################################
	## Constructor
	################################################################################################################################

	#
	# Constructor method.
	#
	# @param		exts		(required) An iterable that provides extensions to match against.
	#
	def __init__(self,
			exts:typing.Iterable[str],
		):

		self.__exts:typing.List[str] = []
		for ext in exts:
			assert isinstance(ext, str)
			assert ext
			if not ext.startswith("."):
				ext = "." + ext
			self.__exts.append(ext)
	#

	################################################################################################################################
	## Public Properties
	################################################################################################################################

	################################################################################################################################
	## Helper Methods
	################################################################################################################################

	################################################################################################################################
	## Public Methods
	################################################################################################################################

	def check(self, fileName:str) -> bool:
		assert isinstance(fileName, str)

		for ext in self.__exts:
			if fileName.endswith(ext):
				return True
		return False
	#

#







